[{"/home/abhishhek/openSource/cert-generator/client/src/index.js":"1","/home/abhishhek/openSource/cert-generator/client/src/reportWebVitals.js":"2","/home/abhishhek/openSource/cert-generator/client/src/App.js":"3","/home/abhishhek/openSource/cert-generator/client/src/Routes.js":"4","/home/abhishhek/openSource/cert-generator/client/src/theme/index.js":"5","/home/abhishhek/openSource/cert-generator/client/src/components/pdf/certificateGenertorWithPdf.js":"6","/home/abhishhek/openSource/cert-generator/client/src/components/temp.js":"7","/home/abhishhek/openSource/cert-generator/client/src/pages/csv/csvUpload.js":"8","/home/abhishhek/openSource/cert-generator/client/src/theme/typography.js":"9","/home/abhishhek/openSource/cert-generator/client/src/theme/shadow.js":"10","/home/abhishhek/openSource/cert-generator/client/src/pages/ImageCanvas/index.js":"11","/home/abhishhek/openSource/cert-generator/client/src/pages/404/index.js":"12","/home/abhishhek/openSource/cert-generator/client/src/components/csv.js":"13","/home/abhishhek/openSource/cert-generator/client/src/constants/index.js":"14","/home/abhishhek/openSource/cert-generator/client/src/components/Button/index.js":"15","/home/abhishhek/openSource/cert-generator/client/src/components/image/cecrtificateGeneratorByImage.js":"16","/home/abhishhek/openSource/cert-generator/client/src/components/table.js":"17","/home/abhishhek/openSource/cert-generator/client/src/data/index.js":"18","/home/abhishhek/openSource/cert-generator/client/src/layout/index.js":"19","/home/abhishhek/openSource/cert-generator/client/src/layout/TopBar/index.js":"20","/home/abhishhek/openSource/cert-generator/client/src/layout/TopBar/Item.js":"21","/home/abhishhek/openSource/cert-generator/client/src/layout/TopBar/Account.js":"22","/home/abhishhek/openSource/cert-generator/client/src/layout/TopBar/LoginDialog.js":"23","/home/abhishhek/openSource/cert-generator/client/src/layout/TopBar/HeaderItems.js":"24","/home/abhishhek/openSource/cert-generator/client/src/layout/TopBar/Logo.js":"25"},{"size":493,"mtime":1609317599588,"results":"26","hashOfConfig":"27"},{"size":356,"mtime":1609317599616,"results":"28","hashOfConfig":"27"},{"size":242,"mtime":1609624153842,"results":"29","hashOfConfig":"27"},{"size":782,"mtime":1610305266923,"results":"30","hashOfConfig":"27"},{"size":1578,"mtime":1610303565492,"results":"31","hashOfConfig":"27"},{"size":6834,"mtime":1609623857116,"results":"32","hashOfConfig":"27"},{"size":14835,"mtime":1609797061682,"results":"33","hashOfConfig":"27"},{"size":751,"mtime":1610306139924,"results":"34","hashOfConfig":"27"},{"size":792,"mtime":1609345308634,"results":"35","hashOfConfig":"27"},{"size":3258,"mtime":1609345308618,"results":"36","hashOfConfig":"27"},{"size":643,"mtime":1609798871261,"results":"37","hashOfConfig":"27"},{"size":588,"mtime":1609345308526,"results":"38","hashOfConfig":"27"},{"size":4447,"mtime":1610306139480,"results":"39","hashOfConfig":"27"},{"size":31,"mtime":1609621369035,"results":"40","hashOfConfig":"27"},{"size":748,"mtime":1609453352979,"results":"41","hashOfConfig":"27"},{"size":9364,"mtime":1610306139588,"results":"42","hashOfConfig":"27"},{"size":3157,"mtime":1609797061634,"results":"43","hashOfConfig":"27"},{"size":683,"mtime":1609840116997,"results":"44","hashOfConfig":"27"},{"size":1024,"mtime":1610306139800,"results":"45","hashOfConfig":"27"},{"size":4996,"mtime":1610306139868,"results":"46","hashOfConfig":"27"},{"size":292,"mtime":1610306139872,"results":"47","hashOfConfig":"27"},{"size":3901,"mtime":1610302031898,"results":"48","hashOfConfig":"27"},{"size":1867,"mtime":1610301987550,"results":"49","hashOfConfig":"27"},{"size":1125,"mtime":1610306139832,"results":"50","hashOfConfig":"27"},{"size":241,"mtime":1610306139892,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1ec3iz1",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/home/abhishhek/openSource/cert-generator/client/src/index.js",[],["110","111"],"/home/abhishhek/openSource/cert-generator/client/src/reportWebVitals.js",[],"/home/abhishhek/openSource/cert-generator/client/src/App.js",[],"/home/abhishhek/openSource/cert-generator/client/src/Routes.js",[],"/home/abhishhek/openSource/cert-generator/client/src/theme/index.js",[],"/home/abhishhek/openSource/cert-generator/client/src/components/pdf/certificateGenertorWithPdf.js",["112","113","114"],"import {\n  Divider,\n  Drawer,\n  Fab,\n  makeStyles,\n  TextField,\n  Typography\n} from '@material-ui/core'\nimport IconButton from '@material-ui/core/IconButton'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport CloseIcon from '@material-ui/icons/Close'\nimport EditIcon from '@material-ui/icons/Edit'\nimport { saveAs } from 'file-saver'\nimport * as pdfLib from 'pdf-lib'\nimport React, { useEffect, useState } from 'react'\nimport { Document, Page, pdfjs } from 'react-pdf'\nimport { drawerWidth } from '../../constants'\nimport CustomButton from '../Button'\n\nconst { PDFDocument, rgb, StandardFonts } = pdfLib\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  btn: {\n    margin: theme.spacing(2, 1, 0),\n    padding: theme.spacing(1.5, 2)\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    backgroundColor: 'grey'\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  fab: {\n    position: 'absolute',\n    bottom: theme.spacing(5),\n    right: theme.spacing(5)\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    // margin: theme.spacing(30, 1, 0),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-start',\n    cursor: 'pointer'\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginRight: drawerWidth\n  },\n  textField: {\n    marginTop: '20px',\n    backgroundColor: '#f7f7f7'\n  }\n}))\n\nconst CertificateGeneratorWithPdf = () => {\n  const classes = useStyles()\n  const defaultValue = { name: 'Abhishek Kumar', x: 220, y: 360, size: 50 }\n\n  const [pdf, setPdf] = useState(null)\n  const [numPages, setNumPages] = useState(null)\n  const [pageNumber, setPageNumber] = useState(1)\n  const [textDrawProperties, setTextDrawProperties] = useState(defaultValue)\n  const [open, setOpen] = React.useState(true)\n\n  useEffect(() => {\n    generatePDF(textDrawProperties).then((arr) => setPdf(arr))\n  }, [])\n\n  function onDocumentLoadSuccess({ numPages }) {\n    setNumPages(numPages)\n  }\n\n  function download() {\n    if (pdf == null) {\n      alert('No New Changes are made on template')\n    } else {\n      var file = new File([pdf], 'CfcCertificate.pdf', {\n        type: 'application/pdf;charset=utf-8'\n      })\n      saveAs(file)\n    }\n  }\n\n  const handleChange = (e) => {\n    setTextDrawProperties({\n      ...textDrawProperties,\n      [e.target.name]: e.target.value\n    })\n    console.log(e.target.name)\n  }\n\n  const resetToDefault = () => {\n    setTextDrawProperties(defaultValue)\n    generatePDF(defaultValue).then((arr) => setPdf(arr))\n  }\n\n  return (\n    <div>\n      {pdf !== null ? (\n        <Document\n          file={{ data: pdf }}\n          onLoadSuccess={onDocumentLoadSuccess}\n          onLoadError={console.error}\n        >\n          <Page pageNumber={pageNumber} />\n        </Document>\n      ) : (\n        <></>\n      )}\n\n      <Typography>Click on show pdf changes to see the made changes</Typography>\n\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"right\"\n        open={open}\n      >\n        <TextField\n          className={classes.textField}\n          value={textDrawProperties.x}\n          name=\"x\"\n          id=\"outlined-numberX\"\n          label=\"Horizontal Position\"\n          type=\"number\"\n          onChange={handleChange}\n          InputLabelProps={{\n            shrink: true\n          }}\n          variant=\"outlined\"\n        />\n        <TextField\n          className={classes.textField}\n          id=\"outlined-numberY\"\n          name=\"y\"\n          value={textDrawProperties.y}\n          label=\"Vertical Position\"\n          type=\"number\"\n          onChange={handleChange}\n          InputLabelProps={{\n            shrink: true\n          }}\n          variant=\"outlined\"\n        />\n        <TextField\n          className={classes.textField}\n          id=\"fontSize\"\n          name=\"size\"\n          label=\"fontSize\"\n          value={textDrawProperties.size}\n          type=\"number\"\n          onChange={handleChange}\n          variant=\"outlined\"\n        />\n        <CustomButton\n          className={classes.btn}\n          title=\"Show Pdf changes\"\n          style={{ backgroundColor: '#f9af28' }}\n          onClick={() => {\n            const val = 'Abhishek Kumar'\n            //check if the text is empty or not\n            if (val.trim() !== '') {\n              // console.log(val);\n              generatePDF(textDrawProperties).then((arr) => {\n                setPdf(arr)\n              })\n            } else {\n              console.log('Empty String')\n            }\n          }}\n        />\n        <CustomButton\n          className={classes.btn}\n          title=\"Reset To Default\"\n          onClick={() => {\n            resetToDefault()\n          }}\n        ></CustomButton>\n        <CustomButton\n          style={{ backgroundColor: '#03506a' }}\n          className={classes.btn}\n          title=\"Download\"\n          onClick={() => {\n            download()\n          }}\n        />\n        <Divider style={{ marginTop: '25vh' }} />\n        <div\n          className={classes.drawerHeader}\n          onClick={() => {\n            setOpen(!open)\n          }}\n        >\n          <IconButton>\n            <ChevronRightIcon />\n          </IconButton>\n          <Typography style={{ display: 'inline' }}>Close</Typography>\n        </div>\n      </Drawer>\n      {!open ? (\n        <Fab\n          className={classes.fab}\n          color=\"primary\"\n          onClick={() => {\n            setOpen(!open)\n          }}\n        >\n          {open ? <CloseIcon /> : <EditIcon />}\n        </Fab>\n      ) : (\n        <></>\n      )}\n    </div>\n  )\n}\n\nconst generatePDF = async (properties) => {\n  const { name, x, y, size } = properties\n  console.log('X:' + x + 'y: ' + y)\n  const existingPdfBytes = await fetch('t2.pdf').then((res) =>\n    res.arrayBuffer()\n  )\n\n  // Load a PDFDocument from the existing PDF bytes\n  const pdfDoc = await PDFDocument.load(existingPdfBytes)\n  // pdfDoc.registerFontkit(fontkit);\n\n  // //get font\n  // const fontBytes = await fetch(\"Source Serif Pro\").then((res) =>\n  //   res.arrayBuffer()\n  // );\n\n  // Embed our custom font in the document\n  const helveticaFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold)\n\n  // Get the first page of the document\n  const pages = pdfDoc.getPages()\n  const firstPage = pages[0]\n\n  firstPage.drawText(name, {\n    x: parseInt(x),\n    y: parseInt(y),\n    size: parseInt(size),\n    font: helveticaFont,\n    color: rgb(0.7, 0.625, 0.35)\n  })\n\n  return await pdfDoc.save()\n}\n\nexport default CertificateGeneratorWithPdf\n","/home/abhishhek/openSource/cert-generator/client/src/components/temp.js",["115"],"//------------------------------------------------\n// A temporary file just to test out things, Nothing to do or is related with main codebase\n//Please ignore\n//------------------------------------------------\n/* eslint-disable no-use-before-define */\nimport React from 'react'\nimport Chip from '@material-ui/core/Chip'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 500,\n    '& > * + *': {\n      marginTop: theme.spacing(3)\n    }\n  }\n}))\n\nexport default function Tags() {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <Autocomplete\n        multiple\n        id=\"tags-outlined\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={[top100Films[13]]}\n        onChange={(event, newValue) => {\n          console.log(event)\n          console.log(newValue)\n        }}\n        // filterSelectedOptions\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"outlined\"\n            label=\"filterSelectedOptions\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n    </div>\n  )\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'Léon: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title:\n      'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL·E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Amélie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 }\n]\n\n/* eslint-disable no-use-before-define */\n// import React from 'react';\n// import { useTheme, fade, makeStyles } from '@material-ui/core/styles';\n// import Popper from '@material-ui/core/Popper';\n// import SettingsIcon from '@material-ui/icons/Settings';\n// import CloseIcon from '@material-ui/icons/Close';\n// import DoneIcon from '@material-ui/icons/Done';\n// import Autocomplete from '@material-ui/lab/Autocomplete';\n// import ButtonBase from '@material-ui/core/ButtonBase';\n// import InputBase from '@material-ui/core/InputBase';\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     width: 221,\n//     fontSize: 13,\n//   },\n//   button: {\n//     fontSize: 13,\n//     width: '100%',\n//     textAlign: 'left',\n//     paddingBottom: 8,\n//     color: '#586069',\n//     fontWeight: 600,\n//     '&:hover,&:focus': {\n//       color: '#0366d6',\n//     },\n//     '& span': {\n//       width: '100%',\n//     },\n//     '& svg': {\n//       width: 16,\n//       height: 16,\n//     },\n//   },\n//   tag: {\n//     marginTop: 3,\n//     height: 20,\n//     width: 400,\n//     padding: '.15em 4px',\n//     fontWeight: 600,\n//     lineHeight: '15px',\n//     borderRadius: 2,\n//   },\n//   popper: {\n//     border: '1px solid rgba(27,31,35,.15)',\n//     boxShadow: '0 3px 12px rgba(27,31,35,.15)',\n//     borderRadius: 3,\n//     width: 300,\n//     zIndex: 1,\n//     fontSize: 13,\n//     color: '#586069',\n//     backgroundColor: '#f6f8fa',\n//   },\n//   header: {\n//     borderBottom: '1px solid #e1e4e8',\n//     padding: '8px 10px',\n//     fontWeight: 600,\n//   },\n//   inputBase: {\n//     padding: 10,\n//     width: '100%',\n//     borderBottom: '1px solid #dfe2e5',\n//     '& input': {\n//       borderRadius: 4,\n//       backgroundColor: theme.palette.common.white,\n//       padding: 8,\n//       transition: theme.transitions.create(['border-color', 'box-shadow']),\n//       border: '1px solid #ced4da',\n//       fontSize: 14,\n//       '&:focus': {\n//         boxShadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 0.2rem`,\n//         borderColor: theme.palette.primary.main,\n//       },\n//     },\n//   },\n//   paper: {\n//     boxShadow: 'none',\n//     margin: 0,\n//     color: '#586069',\n//     fontSize: 13,\n//   },\n//   option: {\n//     minHeight: 'auto',\n//     alignItems: 'flex-start',\n//     padding: 8,\n//     '&[aria-selected=\"true\"]': {\n//       backgroundColor: 'transparent',\n//     },\n//     '&[data-focus=\"true\"]': {\n//       backgroundColor: theme.palette.action.hover,\n//     },\n//   },\n//   popperDisablePortal: {\n//     position: 'relative',\n//   },\n//   iconSelected: {\n//     width: 17,\n//     height: 17,\n//     marginRight: 5,\n//     marginLeft: -2,\n//   },\n//   color: {\n//     width: 14,\n//     height: 14,\n//     flexShrink: 0,\n//     borderRadius: 3,\n//     marginRight: 8,\n//     marginTop: 2,\n//   },\n//   text: {\n//     flexGrow: 1,\n//   },\n//   close: {\n//     opacity: 0.6,\n//     width: 18,\n//     height: 18,\n//   },\n// }));\n\n// export default function GitHubLabel() {\n//   const classes = useStyles();\n//   const [anchorEl, setAnchorEl] = React.useState(null);\n//   const [value, setValue] = React.useState([labels[1], labels[11]]);\n//   const [pendingValue, setPendingValue] = React.useState([]);\n//   const theme = useTheme();\n\n//   const handleClick = (event) => {\n//     setPendingValue(value);\n//     setAnchorEl(event.currentTarget);\n//   };\n\n//   const handleClose = (event, reason) => {\n//     if (reason === 'toggleInput') {\n//       return;\n//     }\n//     setValue(pendingValue);\n//     if (anchorEl) {\n//       anchorEl.focus();\n//     }\n//     setAnchorEl(null);\n//     console.log(value)\n//   };\n\n//   const open = Boolean(anchorEl);\n//   const id = open ? 'github-label' : undefined;\n\n//   return (\n//     <React.Fragment>\n//       <div className={classes.root}>\n//         <ButtonBase\n//           disableRipple\n//           className={classes.button}\n//           aria-describedby={id}\n//           onClick={handleClick}\n//         >\n//           <span>Labels</span>\n//           <SettingsIcon />\n//         </ButtonBase>\n//         {value.map((label) => (\n//           <div\n//             key={label.name}\n//             className={classes.tag}\n//             style={{\n//               backgroundColor: label.color,\n//               color: theme.palette.getContrastText(label.color),\n//             }}\n//           >\n//             {label.name}\n//           </div>\n//         ))}\n//       </div>\n//       <Popper\n//         id={id}\n//         open={open}\n//         anchorEl={anchorEl}\n//         placement=\"bottom-start\"\n//         className={classes.popper}\n//       >\n//         <div className={classes.header}>Apply labels to this pull request</div>\n//         <Autocomplete\n//           open\n//           onClose={handleClose}\n//           multiple\n//           classes={{\n//             paper: classes.paper,\n//             option: classes.option,\n//             popperDisablePortal: classes.popperDisablePortal,\n//           }}\n//           value={pendingValue}\n//           onChange={(event, newValue) => {\n//             setPendingValue(newValue);\n//           }}\n//           disableCloseOnSelect\n//           disablePortal\n//           renderTags={() => null}\n//           noOptionsText=\"No labels\"\n//           renderOption={(option, { selected }) => (\n//             <React.Fragment>\n//               <DoneIcon\n//                 className={classes.iconSelected}\n//                 style={{ visibility: selected ? 'visible' : 'hidden' }}\n//               />\n//               <span className={classes.color} style={{ backgroundColor: option.color }} />\n//               <div className={classes.text}>\n//                 {option.name}\n//                 <br />\n//                 {option.description}\n//               </div>\n//               <CloseIcon\n//                 className={classes.close}\n//                 style={{ visibility: selected ? 'visible' : 'hidden' }}\n//               />\n//             </React.Fragment>\n//           )}\n//           options={[...labels].sort((a, b) => {\n//             // Display the selected labels first.\n//             let ai = value.indexOf(a);\n//             ai = ai === -1 ? value.length + labels.indexOf(a) : ai;\n//             let bi = value.indexOf(b);\n//             bi = bi === -1 ? value.length + labels.indexOf(b) : bi;\n//             return ai - bi;\n//           })}\n//           getOptionLabel={(option) => option.name}\n//           renderInput={(params) => (\n//             <InputBase\n//               ref={params.InputProps.ref}\n//               inputProps={params.inputProps}\n//               autoFocus\n//               className={classes.inputBase}\n//             />\n//           )}\n//         />\n//       </Popper>\n//     </React.Fragment>\n//   );\n// }\n\n// // From https://github.com/abdonrd/github-labels\n// const labels = [\n//   {\n//     name: 'good first issue',\n//     color: '#7057ff',\n//     description: 'Good for newcomers',\n//   },\n//   {\n//     name: 'help wanted',\n//     color: '#008672',\n//     description: 'Extra attention is needed',\n//   },\n//   {\n//     name: 'priority: critical',\n//     color: '#b60205',\n//     description: '',\n//   },\n//   {\n//     name: 'priority: high',\n//     color: '#d93f0b',\n//     description: '',\n//   },\n//   {\n//     name: 'priority: low',\n//     color: '#0e8a16',\n//     description: '',\n//   },\n//   {\n//     name: 'priority: medium',\n//     color: '#fbca04',\n//     description: '',\n//   },\n//   {\n//     name: \"status: can't reproduce\",\n//     color: '#fec1c1',\n//     description: '',\n//   },\n//   {\n//     name: 'status: confirmed',\n//     color: '#215cea',\n//     description: '',\n//   },\n//   {\n//     name: 'status: duplicate',\n//     color: '#cfd3d7',\n//     description: 'This issue or pull request already exists',\n//   },\n//   {\n//     name: 'status: needs information',\n//     color: '#fef2c0',\n//     description: '',\n//   },\n//   {\n//     name: 'status: wont do/fix',\n//     color: '#eeeeee',\n//     description: 'This will not be worked on',\n//   },\n//   {\n//     name: 'type: bug',\n//     color: '#d73a4a',\n//     description: \"Something isn't working\",\n//   },\n//   {\n//     name: 'type: discussion',\n//     color: '#d4c5f9',\n//     description: '',\n//   },\n//   {\n//     name: 'type: documentation',\n//     color: '#006b75',\n//     description: '',\n//   },\n//   {\n//     name: 'type: enhancement',\n//     color: '#84b6eb',\n//     description: '',\n//   },\n//   {\n//     name: 'type: epic',\n//     color: '#3e4b9e',\n//     description: 'A theme of work that contain sub-tasks',\n//   },\n//   {\n//     name: 'type: feature request',\n//     color: '#fbca04',\n//     description: 'New feature or request',\n//   },\n//   {\n//     name: 'type: question',\n//     color: '#d876e3',\n//     description: 'Further information is requested',\n//   },\n// ];\n","/home/abhishhek/openSource/cert-generator/client/src/pages/csv/csvUpload.js",["116"],"import { AppBar, makeStyles, Typography } from '@material-ui/core'\nimport React from 'react'\nimport CsvReader from '../../components/csv'\nimport MainLayout from '../../layout'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%',\n    textAlign: 'center'\n  },\n  heading: {\n    fontSize: 40,\n    fontWeight: 700,\n    color: theme.palette.primary.main,\n    padding: theme.spacing(3, 0, 6)\n  }\n}))\n\nconst CsvUpload = () => {\n  const classes = useStyles()\n\n  return (\n    <MainLayout>\n      <div className={classes.root}>\n        <Typography align=\"center\" className={classes.heading}>\n          Please Import Your CSV File Here\n        </Typography>\n        <CsvReader />\n      </div>\n    </MainLayout>\n  )\n}\n\nexport default CsvUpload\n","/home/abhishhek/openSource/cert-generator/client/src/theme/typography.js",["117"],"export default {\n  fontFamily: ['\"Montserrat\"'].join(','),\n\n  h1: {\n    fontWeight: 700,\n    fontSize: 35,\n    letterSpacing: '-0.24px'\n  },\n  h2: {\n    fontWeight: 600,\n    fontSize: 29,\n    letterSpacing: '-0.24px'\n  },\n  h3: {\n    fontWeight: 600,\n    fontSize: 24,\n    letterSpacing: '-0.06px'\n  },\n  h4: {\n    fontWeight: 600,\n    fontSize: 20,\n    letterSpacing: '-0.06px'\n  },\n  h5: {\n    fontWeight: 600,\n    fontSize: 16,\n    letterSpacing: '-0.05px'\n  },\n  h6: {\n    fontWeight: 700,\n    fontSize: 14,\n    letterSpacing: '-0.05px'\n  },\n  body1: {\n    fontWeight: 400,\n    fontSize: 16,\n    letterSpacing: '-0.05px'\n  },\n  body2: {\n    fontWeight: 400,\n    fontSize: 14,\n    letterSpacing: '-0.05px'\n  },\n  overline: {\n    fontWeight: 500\n  },\n  caption: {\n    fontWeight: 500\n  }\n}\n","/home/abhishhek/openSource/cert-generator/client/src/theme/shadow.js",[],"/home/abhishhek/openSource/cert-generator/client/src/pages/ImageCanvas/index.js",[],"/home/abhishhek/openSource/cert-generator/client/src/pages/404/index.js",[],"/home/abhishhek/openSource/cert-generator/client/src/components/csv.js",["118","119","120","121"],"import {\n  Box,\n  Button,\n  Container,\n  makeStyles,\n  TextField,\n  Typography\n} from '@material-ui/core'\nimport React, { useReducer, useState } from 'react'\nimport { CSVReader } from 'react-papaparse'\nimport Table from './table'\nimport { Link } from 'react-router-dom'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\n\n// import\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  button: {\n    marginTop: '20px',\n    padding: '8px 24px',\n    backgroundColor: 'pink'\n  },\n  box: {\n    backgroundColor: '#ee6401',\n    width: 'max-content',\n    padding: '12px 18px',\n    borderRadius: '6px',\n    marginTop: '32px',\n    margin: 'auto'\n  },\n  link: {\n    textDecoration: 'none',\n    color: '#fff',\n    width: 'max-content',\n    display: 'block',\n    margin: 'auto'\n  }\n}))\n\nconst CsvReaderComponent = () => {\n  const classes = useStyles()\n\n  const [csvData, setCsvData] = useState(null)\n  const [columns, setColumns] = useState(null)\n  const [selectedData, setSelectedData] = useState([])\n\n  const mapColumns = (cols) => {\n    const colArray = []\n    cols.map((col, index) => {\n      return colArray.push({ index: index, column: col })\n    })\n    setColumns(colArray)\n  }\n\n  const handleOnDrop = (data, file) => {\n    console.log('---------------------------')\n    console.log(data)\n    console.log('---------------------------')\n\n    const dataArray = []\n\n    data.map((element) => {\n      return dataArray.push(element.data)\n    })\n\n    setCsvData(dataArray)\n    mapColumns(dataArray[0])\n\n    if (\n      !(\n        file.type === 'text/csv' ||\n        file.type === '.csv' ||\n        file.type === 'application/vnd.ms-excel'\n      )\n    ) {\n      handleOnError(\n        'File not compatible',\n        file.name,\n        file,\n        'File not compatible, provide only csv parsable files'\n      )\n    }\n  }\n\n  const handleOnError = (err, file, inputElem, reason) => {\n    console.log('error here---------------******')\n    console.log('file: ' + file)\n    console.log(err)\n  }\n\n  const handleOnRemoveFile = (data) => {\n    console.log('---------------------------')\n    console.log(data)\n    setCsvData(null)\n    console.log('---------------------------')\n  }\n\n  const show = (newValue) => {\n    console.log('hei')\n    console.log(newValue)\n    const selectedDataForCerts = []\n    if (newValue.length !== 0) {\n      csvData.map((arrayItem, index) => {\n        const item = []\n        newValue.map(({ column, index }, i) => {\n          const obj = {}\n          obj.csvIdx = index\n          obj.index = i\n          obj.title = arrayItem[index]\n          item.push(obj)\n        })\n        selectedDataForCerts.push(item)\n      })\n    }\n    setSelectedData(selectedDataForCerts)\n    console.log(columns)\n    console.log(newValue)\n    console.log(selectedDataForCerts)\n  }\n\n  return (\n    <Container>\n      <CSVReader\n        onDrop={handleOnDrop}\n        onError={handleOnError}\n        addRemoveButton\n        onRemoveFile={handleOnRemoveFile}\n      >\n        <span>Click or drop your csv file here</span>\n      </CSVReader>\n      {columns === null ? (\n        ''\n      ) : (\n        <Autocomplete\n          style={{ margin: '32px auto', width: '80%' }}\n          multiple\n          id=\"tags-outlined\"\n          options={columns}\n          getOptionLabel={(option) => option.column}\n          onChange={(event, newValue) => {\n            show(newValue)\n            // setSelectedColumns(newValue)\n          }}\n          // filterSelectedOptions\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              variant=\"outlined\"\n              placeholder=\"Select Columns\"\n            />\n          )}\n        />\n      )}\n\n      {selectedData.length === 0 ? (\n        <Box className={classes.box}>\n          {csvData === null\n            ? 'First, Import Csv File'\n            : 'Please select columns'}\n        </Box>\n      ) : (\n        <Link\n          to={{ pathname: '/image-canvas', state: selectedData }}\n          className={classes.link}\n        >\n          <Box className={classes.box}>\n            {selectedData.length === 0 ? 'Please select columns' : \"Let's Go\"}\n          </Box>\n        </Link>\n      )}\n\n      {csvData === null ? (\n        ''\n      ) : (\n        <div style={{ marginTop: '80px' }}>\n          <Typography>Table Preview</Typography>\n          <Table {...csvData} />\n        </div>\n      )}\n      <Box height=\"120px\" />\n    </Container>\n  )\n}\n\nexport default CsvReaderComponent\n","/home/abhishhek/openSource/cert-generator/client/src/constants/index.js",[],"/home/abhishhek/openSource/cert-generator/client/src/components/Button/index.js",[],"/home/abhishhek/openSource/cert-generator/client/src/components/image/cecrtificateGeneratorByImage.js",["122","123","124","125"],"/home/abhishhek/openSource/cert-generator/client/src/components/table.js",["126"],"import React from 'react'\nimport { withStyles, makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport { TablePagination } from '@material-ui/core'\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell)\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow)\n\nconst useStyles = makeStyles({\n  root: {\n    margin: '40px 0px'\n  },\n  table: {\n    minWidth: 700\n  }\n})\n\nexport default function CustomizedTables(csvData) {\n  const classes = useStyles()\n  const [page, setPage] = React.useState(0)\n  const [rowsPerPage, setRowsPerPage] = React.useState(10)\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value)\n    setPage(0)\n  }\n\n  return (\n    <Paper>\n      <TableContainer component={Paper} className={classes.root}>\n        <Table className={classes.table} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>{csvData[0][0]}</StyledTableCell>\n              {csvData[0].map((ele, index) =>\n                index !== 0 ? (\n                  <StyledTableCell align=\"right\">{ele}</StyledTableCell>\n                ) : (\n                  <></>\n                )\n              )}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {Object.keys(csvData)\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage + 1)\n              .map((key, index) => {\n                if (index !== 0 || page !== 0) {\n                  // 0th index is usually data header\n                  return (\n                    <StyledTableRow key={csvData[key][0]}>\n                      <StyledTableCell component=\"th\" scope=\"row\">\n                        {csvData[key][0]}\n                      </StyledTableCell>\n\n                      {csvData[key].map((ele, index) =>\n                        index !== 0 ? (\n                          <StyledTableCell align=\"right\">{ele}</StyledTableCell>\n                        ) : (\n                          <></>\n                        )\n                      )}\n                    </StyledTableRow>\n                  )\n                }\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 25, 100]}\n        component=\"div\"\n        count={Object.keys(csvData).length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  )\n}\n","/home/abhishhek/openSource/cert-generator/client/src/data/index.js",[],"/home/abhishhek/openSource/cert-generator/client/src/layout/index.js",[],"/home/abhishhek/openSource/cert-generator/client/src/layout/TopBar/index.js",["127","128","129"],"import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  AppBar,\n  Box,\n  Hidden,\n  Toolbar,\n  Typography,\n  Link,\n  makeStyles\n} from '@material-ui/core';\nimport Logo from './Logo';\nimport Item from './Item';\nimport Account from './Account';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n// import { HashLink as Link } from 'react-router-hash-link';\nimport LoginDialog from './LoginDialog';\n// import { useSelector } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    zIndex: theme.zIndex.drawer + 100,\n    backgroundColor: theme.palette.background,\n    paddingLeft: 70,\n    paddingRight: 70,\n    top: 'auto',\n    [theme.breakpoints.down('md')]: {\n      paddingLeft: 15,\n      paddingRight: 15\n    }\n  },\n  toolbar: {\n    minHeight: 64,\n    maxHeight: 64\n  },\n  menuButton: {\n    float: 'right',\n    color: '#000',\n    marginRight: '0px'\n  },\n  list: {\n    width: '100% !important',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  textStyle: {\n    textDecoration: 'none'\n  }\n}));\n\nfunction TopBar({ className, onMobileNavOpen, ...rest }) {\n  const classes = useStyles();\n  // const user = useSelector(state => state.account.user);\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false\n  });\n\n  const pathname = window.location.pathname;\n\n  const navItems = [\n    // { title: 'User', link: '/user' },\n  ];\n\n  const list = () => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={toggleDrawer('right', false)}\n      onKeyDown={toggleDrawer('right', false)}\n    >      \n      <List>\n        {navItems.map((item, index) => (\n          <ListItem button key={index}>\n            <Link\n              smooth\n              to={item.link}\n              variant=\"h5\"\n              className={classes.textStyle}\n            >\n              <Typography variant=\"h4\" color=\"textPrimary\">\n                {item.title}\n              </Typography>\n            </Link>\n          </ListItem>\n        ))}\n        {/* {!user ? (\n          <ListItem>\n            <Account />\n          </ListItem>\n        ) : (\n          <div />\n        )} */}\n      </List>\n    </div>\n  );\n  const headerMoblie = () => (\n    <div>\n      <RouterLink\n        to=\"/\"\n        onClick={toggleDrawer('right', false)}\n        style={{ position: 'absolute', left: '20px', top: '3%' }}\n      >\n        <Logo className={classes.logo} />\n      </RouterLink>\n      <Box ml={8}>\n        <IconButton\n          edge=\"end\"\n          className={classes.menuButton}\n          aria-label=\"menu\"\n          onClick={toggleDrawer('right', false)}\n          style={{ position: 'absolute', right: '15px', top: '1%' }}\n        >\n          <CloseIcon />\n        </IconButton>\n      </Box>\n    </div>\n  );\n\n  const toggleDrawer = (anchor, open) => event => {\n    if (\n      event.type === 'keydown' &&\n      (event.key === 'Tab' || event.key === 'Shift')\n    ) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  return (\n    <AppBar className={clsx(classes.root, className)} {...rest}>\n      <Toolbar className={classes.toolbar}>\n        <RouterLink to=\"/\">\n          <Logo className={classes.logo} />\n        </RouterLink>\n        <Typography variant=\"h4\" style={{color: '#fff', marginLeft: '16px'}}>Certificate Generator</Typography>\n        <Hidden smDown>\n          <Box ml={2} flexGrow={1} />\n          {navItems.map((item, index) => (\n            <Item\n              active={item.link === pathname}\n              title={item.title}\n              link={item.link}\n            />\n          ))}\n          <Box ml={2} flexGrow={0.05} />\n          <Box ml={2} flexGrow={0.05} />\n        </Hidden>\n        <Hidden mdUp>\n          {/* <Box\n            display=\"flex\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            style={{ position: 'absolute', right: '0px' }}\n          >\n            <LoginDialog />\n            {user ? <Account /> : <div />}\n            <IconButton\n              edge=\"end\"\n              className={classes.menuButton}\n              aria-label=\"menu\"\n              onClick={toggleDrawer('right', true)}\n            >\n              <MenuIcon />\n            </IconButton>\n          </Box> */}\n          <Drawer\n            width={'100%'}\n            anchor=\"right\"\n            open={state['right']}\n            onClose={toggleDrawer('right', false)}\n          >\n            {headerMoblie()}\n            {list()}\n          </Drawer>\n        </Hidden>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nTopBar.propTypes = {\n  className: PropTypes.string,\n  onMobileNavOpen: PropTypes.func\n};\n\nexport default TopBar;\n","/home/abhishhek/openSource/cert-generator/client/src/layout/TopBar/Item.js",[],"/home/abhishhek/openSource/cert-generator/client/src/layout/TopBar/Account.js",[],"/home/abhishhek/openSource/cert-generator/client/src/layout/TopBar/LoginDialog.js",[],"/home/abhishhek/openSource/cert-generator/client/src/layout/TopBar/HeaderItems.js",[],"/home/abhishhek/openSource/cert-generator/client/src/layout/TopBar/Logo.js",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":71,"column":10,"nodeType":"136","messageId":"137","endLine":71,"endColumn":18},{"ruleId":"134","severity":1,"message":"138","line":72,"column":22,"nodeType":"136","messageId":"137","endLine":72,"endColumn":35},{"ruleId":"139","severity":1,"message":"140","line":78,"column":6,"nodeType":"141","endLine":78,"endColumn":8,"suggestions":"142"},{"ruleId":"134","severity":1,"message":"143","line":7,"column":8,"nodeType":"136","messageId":"137","endLine":7,"endColumn":12},{"ruleId":"134","severity":1,"message":"144","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":16},{"ruleId":"145","severity":1,"message":"146","line":1,"column":1,"nodeType":"147","endLine":50,"endColumn":2},{"ruleId":"134","severity":1,"message":"148","line":3,"column":3,"nodeType":"136","messageId":"137","endLine":3,"endColumn":9},{"ruleId":"134","severity":1,"message":"149","line":9,"column":17,"nodeType":"136","messageId":"137","endLine":9,"endColumn":27},{"ruleId":"150","severity":1,"message":"151","line":103,"column":38,"nodeType":"152","messageId":"153","endLine":103,"endColumn":40},{"ruleId":"150","severity":1,"message":"151","line":105,"column":45,"nodeType":"152","messageId":"153","endLine":105,"endColumn":47},{"ruleId":"134","severity":1,"message":"154","line":77,"column":10,"nodeType":"136","messageId":"137","endLine":77,"endColumn":15},{"ruleId":"139","severity":1,"message":"155","line":81,"column":6,"nodeType":"141","endLine":81,"endColumn":8,"suggestions":"156"},{"ruleId":"139","severity":1,"message":"157","line":93,"column":11,"nodeType":"158","endLine":93,"endColumn":37},{"ruleId":"150","severity":1,"message":"151","line":128,"column":44,"nodeType":"152","messageId":"153","endLine":128,"endColumn":46},{"ruleId":"150","severity":1,"message":"159","line":72,"column":33,"nodeType":"152","messageId":"160","endLine":72,"endColumn":35},{"ruleId":"134","severity":1,"message":"161","line":16,"column":8,"nodeType":"136","messageId":"137","endLine":16,"endColumn":15},{"ruleId":"134","severity":1,"message":"162","line":18,"column":8,"nodeType":"136","messageId":"137","endLine":18,"endColumn":16},{"ruleId":"134","severity":1,"message":"163","line":24,"column":8,"nodeType":"136","messageId":"137","endLine":24,"endColumn":19},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"no-unused-vars","'numPages' is assigned a value but never used.","Identifier","unusedVar","'setPageNumber' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'textDrawProperties'. Either include it or remove the dependency array.","ArrayExpression",["166"],"'Chip' is defined but never used.","'AppBar' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Button' is defined but never used.","'useReducer' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'state' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data' and 'textDrawProperties'. Either include them or remove the dependency array. You can also do a functional update 'setTextDrawProperties(t => ...)' if you only need 'textDrawProperties' in the 'setTextDrawProperties' call.",["167"],"Assignments to the 'ctx' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Account' is defined but never used.","'MenuIcon' is defined but never used.","'LoginDialog' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [textDrawProperties]",{"range":"172","text":"173"},"Update the dependencies array to be: [data, textDrawProperties]",{"range":"174","text":"175"},[2204,2206],"[textDrawProperties]",[2064,2066],"[data, textDrawProperties]"]